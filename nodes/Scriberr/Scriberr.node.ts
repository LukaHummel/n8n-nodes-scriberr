import { NodeConnectionTypes, type INodeType, type INodeTypeDescription } from 'n8n-workflow';

export class Scriberr implements INodeType {
	description: INodeTypeDescription = {
	 		displayName: 'Scriberr',
 		name: 'scriberr',
	 		icon: 'file:scriberr.svg',
 		group: ['input'],
 		version: 1,
 		subtitle: '={{$parameter["operation"] + ": " + $parameter["resource"]}}',
 		description: 'Interact with the Scriberr API (transcriptions, notes, chat, summaries)',
 		defaults: { name: 'Scriberr' },
 		usableAsTool: true,
 		inputs: [NodeConnectionTypes.Main],
 		outputs: [NodeConnectionTypes.Main],
 		credentials: [
 			{
 				name: 'scriberrApiKeyApi',
 				required: true,
 				displayOptions: {
 					show: {
 						authentication: ['apiKey'],
 					},
 				},
 			},
 			{
 				name: 'scriberrJwtApi',
 				required: true,
 				displayOptions: {
 					show: {
 						authentication: ['jwt'],
 					},
 				},
 			},
 		],
 		requestDefaults: {
 			baseURL: '={{$parameter.host}}',
 			headers: {
 				Accept: 'application/json',
 				'Content-Type': 'application/json',
 			},
 		},
 		properties: [
 			{
 				displayName: 'Authentication',
 				name: 'authentication',
 				type: 'options',
 				options: [
 					{ name: 'API Key', value: 'apiKey' },
 					{ name: 'JWT (Bearer Token)', value: 'jwt' },
 				],
 				default: 'apiKey',
 			},
 			{
 				displayName: 'Host',
 				name: 'host',
 				type: 'string',
 				default: '={{$credentials.baseUrl || "https://scriberr.app"}}',
 				placeholder: 'e.g. https://scriberr.app or http://localhost:8080',
 				description: 'Base URL of your Scriberr instance (without trailing slash)',
 			},

 			{
 				displayName: 'Resource',
 				name: 'resource',
 				type: 'options',
 				noDataExpression: true,
	 			options: [
	 				{ name: 'Chat', value: 'chat' },
	 				{ name: 'Summary', value: 'summary' },
	 				{ name: 'Transcription', value: 'transcription' },
	 				{ name: 'Note', value: 'note' },
	 			],
 				default: 'transcription',
 			},

 			// Transcription operations
 			{
 				displayName: 'Operation',
 				name: 'operation',
 				type: 'options',
 				noDataExpression: true,
 				displayOptions: { show: { resource: ['transcription'] } },
	 				options: [
	 					{
	 						name: 'Get',
	 						value: 'get',
	 						action: 'Get transcription',
	 						description: 'Get a transcription by ID',
	 						routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/transcription/{{$parameter.transcriptionId}}' } },
	 					},
	 					{
	 						name: 'Get Status',
	 						value: 'getStatus',
	 						action: 'Get transcription status',
	 						description: 'Get the current status of a transcription job',
	 						routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/transcription/{{$parameter.transcriptionId}}/status' } },
	 					},
	 					{
	 						name: 'Get Summary',
	 						value: 'getSummary',
	 						action: 'Get latest summary',
	 						description: 'Get the most recent saved summary for the given transcription',
	 						routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/transcription/{{$parameter.transcriptionId}}/summary' } },
	 					},
	 					{
	 						name: 'Get Transcript',
	 						value: 'getTranscript',
	 						action: 'Get transcript',
	 						description: 'Get the transcript for a completed transcription job',
	 						routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/transcription/{{$parameter.transcriptionId}}/transcript' } },
	 					},
	 					{
	 						name: 'Kill Job',
	 						value: 'kill',
	 						action: 'Kill running transcription job',
	 						description: 'Cancel a currently running transcription job',
	 						routing: { request: { method: 'POST', url: '={{$parameter.host}}/api/v1/transcription/{{$parameter.transcriptionId}}/kill' } },
	 					},
	 					{
	 						name: 'List',
	 						value: 'list',
	 						action: 'List transcriptions',
	 						description: 'Get a list of all transcription records',
	 						routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/transcription/list' } },
	 					},
	 					{
	 						name: 'Update Title',
	 						value: 'updateTitle',
	 						action: 'Update transcription title',
	 						description: 'Update the title of an audio file / transcription',
	 						routing: { request: { method: 'PUT', url: '={{$parameter.host}}/api/v1/transcription/{{$parameter.transcriptionId}}/title' } },
	 					},
	 				],
 				default: 'list',
 			},
 			{
 				displayName: 'Transcription ID',
 				name: 'transcriptionId',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'ID of the transcription job',
 				displayOptions: { show: { resource: ['transcription'], operation: ['get','getStatus','getTranscript','getSummary','kill','updateTitle'] } },
 			},
 			{
 				displayName: 'Title',
 				name: 'title',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'New title for the transcription',
 				displayOptions: { show: { resource: ['transcription'], operation: ['updateTitle'] } },
 				routing: { send: { type: 'body', property: 'title' } },
 			},
 			{
 				displayName: 'Page',
 				name: 'page',
 				type: 'number',
 				default: 1,
 				description: 'Page number',
 				displayOptions: { show: { resource: ['transcription'], operation: ['list'] } },
 				routing: { request: { qs: { page: '={{$value}}' } } },
 			},
	 			{
	 				displayName: 'Limit',
	 				name: 'limit',
	 				type: 'number',
	 				default: 50,
	 				description: 'Max number of results to return',
	 				displayOptions: { show: { resource: ['transcription'], operation: ['list'] } },
	 				typeOptions: { minValue: 1, maxValue: 100 },
	 				routing: { request: { qs: { limit: '={{$value}}' } } },
	 			},
 			{
 				displayName: 'Status',
 				name: 'status',
 				type: 'options',
	 				options: [
	 					{ name: 'Completed', value: 'completed' },
	 					{ name: 'Failed', value: 'failed' },
	 					{ name: 'Pending', value: 'pending' },
	 					{ name: 'Processing', value: 'processing' },
	 					{ name: 'Uploaded', value: 'uploaded' },
	 				],
	 				default: 'uploaded',
 				description: 'Filter by status',
 				displayOptions: { show: { resource: ['transcription'], operation: ['list'] } },
 				routing: { request: { qs: { status: '={{$value}}' } } },
 			},
 			{
 				displayName: 'Search',
 				name: 'q',
 				type: 'string',
 				default: '',
 				description: 'Search in title and audio filename',
 				displayOptions: { show: { resource: ['transcription'], operation: ['list'] } },
 				routing: { request: { qs: { q: '={{$value}}' } } },
 			},

 			// Notes operations
 			{
 				displayName: 'Operation',
 				name: 'operation',
 				type: 'options',
 				noDataExpression: true,
	 				displayOptions: { show: { resource: ['note'] } },
 				options: [
	 					{ name: 'Create', value: 'create', action: 'Create note', description: 'Create a note for a transcription', routing: { request: { method: 'POST', url: '={{$parameter.host}}/api/v1/transcription/{{$parameter.transcriptionId}}/notes' } } },
	 					{ name: 'Delete', value: 'delete', action: 'Delete note', description: 'Delete a note by ID', routing: { request: { method: 'DELETE', url: '={{$parameter.host}}/api/v1/notes/{{$parameter.noteId}}' } } },
	 					{ name: 'Get', value: 'get', action: 'Get note', description: 'Get a note by ID', routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/notes/{{$parameter.noteId}}' } } },
	 					{ name: 'List For Transcription', value: 'listForTranscription', action: 'List notes', description: 'List notes for a transcription', routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/transcription/{{$parameter.transcriptionId}}/notes' } } },
	 					{ name: 'Update', value: 'update', action: 'Update note', description: 'Update a note by ID', routing: { request: { method: 'PUT', url: '={{$parameter.host}}/api/v1/notes/{{$parameter.noteId}}' } } },
 				],
 				default: 'listForTranscription',
 			},
 			{
 				displayName: 'Transcription ID',
 				name: 'transcriptionId',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'ID of the transcription record',
	 			displayOptions: { show: { resource: ['note'], operation: ['listForTranscription','create'] } },
 			},
 			{
 				displayName: 'Note ID',
 				name: 'noteId',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'ID of the note',
	 			displayOptions: { show: { resource: ['note'], operation: ['get','update','delete'] } },
 			},
 			{
 				displayName: 'Content',
 				name: 'content',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'The note content (markdown/plain)',
	 			displayOptions: { show: { resource: ['note'], operation: ['create','update'] } },
 				routing: { send: { type: 'body', property: 'content' } },
 			},
 			{
 				displayName: 'Quote',
 				name: 'quote',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'The exact quoted text chosen by the user',
	 			displayOptions: { show: { resource: ['note'], operation: ['create'] } },
 				routing: { send: { type: 'body', property: 'quote' } },
 			},
 			{
	 			displayName: 'Start Time (Seconds)',
 				name: 'start_time',
 				type: 'number',
 				default: 0,
 				description: 'Start time bound for the selection',
	 			displayOptions: { show: { resource: ['note'], operation: ['create'] } },
 				routing: { send: { type: 'body', property: 'start_time' } },
 			},
 			{
	 			displayName: 'End Time (Seconds)',
 				name: 'end_time',
 				type: 'number',
 				default: 0,
 				description: 'End time bound for the selection',
	 			displayOptions: { show: { resource: ['note'], operation: ['create'] } },
 				routing: { send: { type: 'body', property: 'end_time' } },
 			},
 			{
 				displayName: 'Start Word Index',
 				name: 'start_word_index',
 				type: 'number',
 				default: 0,
 				description: 'Indexed selection into transcript by word positions (start)',
	 			displayOptions: { show: { resource: ['note'], operation: ['create'] } },
 				routing: { send: { type: 'body', property: 'start_word_index' } },
 			},
 			{
 				displayName: 'End Word Index',
 				name: 'end_word_index',
 				type: 'number',
 				default: 0,
 				description: 'Indexed selection into transcript by word positions (end)',
	 			displayOptions: { show: { resource: ['note'], operation: ['create'] } },
 				routing: { send: { type: 'body', property: 'end_word_index' } },
 			},

 			// Chat operations
 			{
 				displayName: 'Operation',
 				name: 'operation',
 				type: 'options',
 				noDataExpression: true,
 				displayOptions: { show: { resource: ['chat'] } },
	 				options: [
	 					{ name: 'Create Session', value: 'createSession', action: 'Create chat session', description: 'Create a new chat session for a transcription', routing: { request: { method: 'POST', url: '={{$parameter.host}}/api/v1/chat/sessions' } } },
	 					{ name: 'Delete Session', value: 'deleteSession', action: 'Delete chat session', description: 'Delete a chat session and all its messages', routing: { request: { method: 'DELETE', url: '={{$parameter.host}}/api/v1/chat/sessions/{{$parameter.sessionId}}' } } },
	 					{ name: 'Get Models', value: 'getModels', action: 'Get available chat models', description: 'Get list of available chat models', routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/chat/models' } } },
	 					{ name: 'Get Session', value: 'getSession', action: 'Get chat session', description: 'Get a chat session with its messages', routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/chat/sessions/{{$parameter.sessionId}}' } } },
	 					{ name: 'List Sessions For Transcription', value: 'listSessionsForTranscription', action: 'List chat sessions for transcription', description: 'Get all chat sessions for a specific transcription', routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/chat/transcriptions/{{$parameter.transcriptionId}}/sessions' } } },
	 					{ name: 'Send Message', value: 'sendMessage', action: 'Send message to session', description: 'Send a message to a chat session and get response', routing: { request: { method: 'POST', url: '={{$parameter.host}}/api/v1/chat/sessions/{{$parameter.sessionId}}/messages' } } },
	 				],
 				default: 'getModels',
 			},
 			{
 				displayName: 'Session ID',
 				name: 'sessionId',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'ID of the chat session',
 				displayOptions: { show: { resource: ['chat'], operation: ['getSession','sendMessage','deleteSession'] } },
 			},
 			{
 				displayName: 'Model',
 				name: 'model',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'Model name (provider must be configured in Scriberr)',
 				displayOptions: { show: { resource: ['chat'], operation: ['createSession'] } },
 				routing: { send: { type: 'body', property: 'model' } },
 			},
 			{
 				displayName: 'Transcription ID',
 				name: 'transcriptionId',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'Transcription to attach the chat session to',
 				displayOptions: { show: { resource: ['chat'], operation: ['createSession','listSessionsForTranscription'] } },
 				routing: { send: { type: 'body', property: 'transcription_id' } },
 			},
 			{
 				displayName: 'Message',
 				name: 'content',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'Message content to send',
 				displayOptions: { show: { resource: ['chat'], operation: ['sendMessage'] } },
 				routing: { send: { type: 'body', property: 'content' } },
 			},

 			// Summaries operations
 			{
 				displayName: 'Operation',
 				name: 'operation',
 				type: 'options',
 				noDataExpression: true,
	 			displayOptions: { show: { resource: ['summary'] } },
	 				options: [
	 					{ name: 'Create Template', value: 'createTemplate', action: 'Create summary template', description: 'Create a new summarization template', routing: { request: { method: 'POST', url: '={{$parameter.host}}/api/v1/summaries' } } },
	 					{ name: 'Delete Template', value: 'deleteTemplate', action: 'Delete summary template', description: 'Delete a summarization template by ID', routing: { request: { method: 'DELETE', url: '={{$parameter.host}}/api/v1/summaries/{{$parameter.templateId}}' } } },
	 					{ name: 'Get Template', value: 'getTemplate', action: 'Get summary template', description: 'Get a summarization template by ID', routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/summaries/{{$parameter.templateId}}' } } },
	 					{ name: 'List Templates', value: 'listTemplates', action: 'List summary templates', description: 'Get all summarization templates', routing: { request: { method: 'GET', url: '={{$parameter.host}}/api/v1/summaries' } } },
	 					{ name: 'Summarize', value: 'summarize', action: 'Summarize content', description: 'Stream an LLM-generated summary for provided content', routing: { request: { method: 'POST', url: '={{$parameter.host}}/api/v1/summarize', headers: { Accept: 'text/event-stream' } } } },
	 					{ name: 'Update Template', value: 'updateTemplate', action: 'Update summary template', description: 'Update a summarization template by ID', routing: { request: { method: 'PUT', url: '={{$parameter.host}}/api/v1/summaries/{{$parameter.templateId}}' } } },
	 				],
 				default: 'listTemplates',
 			},
 			{
 				displayName: 'Template ID',
 				name: 'templateId',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'ID of the summary template',
	 			displayOptions: { show: { resource: ['summary'], operation: ['getTemplate','updateTemplate','deleteTemplate'] } },
 			},
 			{
 				displayName: 'Name',
 				name: 'name',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'Template name',
	 			displayOptions: { show: { resource: ['summary'], operation: ['createTemplate','updateTemplate'] } },
 				routing: { send: { type: 'body', property: 'name' } },
 			},
 			{
 				displayName: 'Model',
 				name: 'summaryModel',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'Model to use for this template',
	 			displayOptions: { show: { resource: ['summary'], operation: ['createTemplate','updateTemplate'] } },
 				routing: { send: { type: 'body', property: 'model' } },
 			},
 			{
 				displayName: 'Prompt',
 				name: 'prompt',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'Prompt used by the template',
 				typeOptions: { rows: 4 },
	 			displayOptions: { show: { resource: ['summary'], operation: ['createTemplate','updateTemplate'] } },
 				routing: { send: { type: 'body', property: 'prompt' } },
 			},
 			{
 				displayName: 'Description',
 				name: 'description',
 				type: 'string',
 				default: '',
 				description: 'Optional description for the template',
				displayOptions: { show: { resource: ['summary'], operation: ['createTemplate','updateTemplate'] } },
 				routing: { send: { type: 'body', property: 'description' } },
 			},
 			{
 				displayName: 'Transcription ID',
 				name: 'sumTranscriptionId',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'Transcription ID to summarize',
	 			displayOptions: { show: { resource: ['summary'], operation: ['summarize'] } },
 				routing: { send: { type: 'body', property: 'transcription_id' } },
 			},
 			{
 				displayName: 'Model',
 				name: 'sumModel',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'Model to use for summarization',
	 			displayOptions: { show: { resource: ['summary'], operation: ['summarize'] } },
 				routing: { send: { type: 'body', property: 'model' } },
 			},
 			{
 				displayName: 'Content',
 				name: 'sumContent',
 				type: 'string',
 				default: '',
 				required: true,
 				description: 'Content to summarize',
 				typeOptions: { rows: 4 },
	 			displayOptions: { show: { resource: ['summary'], operation: ['summarize'] } },
 				routing: { send: { type: 'body', property: 'content' } },
 			},
 			{
 				displayName: 'Template ID',
 				name: 'sumTemplateId',
 				type: 'string',
 				default: '',
 				description: 'Optional template ID to use for summarization',
				displayOptions: { show: { resource: ['summary'], operation: ['summarize'] } },
 				routing: { send: { type: 'body', property: 'template_id' } },
 			},
 		],
 	};
}
